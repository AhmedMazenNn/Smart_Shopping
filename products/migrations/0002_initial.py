# Generated by Django 4.2.22 on 2025-07-01 16:07

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('stores', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='product',
            name='last_updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_products', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By'),
        ),
        migrations.AddField(
            model_name='inventorymovement',
            name='branch',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_movements_by_branch', to='stores.branch', verbose_name='Branch'),
        ),
        migrations.AddField(
            model_name='inventorymovement',
            name='inventory',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='movements', to='products.branchproductinventory', verbose_name='Inventory Record'),
        ),
        migrations.AddField(
            model_name='inventorymovement',
            name='moved_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventory_movements', to=settings.AUTH_USER_MODEL, verbose_name='Moved By'),
        ),
        migrations.AddField(
            model_name='inventorymovement',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_movements_by_product', to='products.product', verbose_name='Product'),
        ),
        migrations.AddField(
            model_name='department',
            name='branch',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='departments', to='stores.branch', verbose_name='Branch'),
        ),
        migrations.AddField(
            model_name='branchproductinventory',
            name='branch',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_inventories', to='stores.branch', verbose_name='Branch'),
        ),
        migrations.AddField(
            model_name='branchproductinventory',
            name='last_updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_branch_inventories', to=settings.AUTH_USER_MODEL, verbose_name='Last Updated By'),
        ),
        migrations.AddField(
            model_name='branchproductinventory',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='branch_inventories', to='products.product', verbose_name='Product'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.UniqueConstraint(condition=models.Q(('barcode__isnull', False), models.Q(('barcode', ''), _negated=True)), fields=('barcode',), name='unique_barcode_global', violation_error_message='This barcode already exists for another product.'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.UniqueConstraint(condition=models.Q(('item_number__isnull', False), models.Q(('item_number', ''), _negated=True)), fields=('item_number',), name='unique_item_number_global', violation_error_message='This item number already exists for another product.'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.UniqueConstraint(condition=models.Q(('accounting_system_id__isnull', False), models.Q(('accounting_system_id', ''), _negated=True)), fields=('accounting_system_id',), name='unique_accounting_id_global', violation_error_message='This accounting system ID already exists for another product.'),
        ),
        migrations.AlterUniqueTogether(
            name='department',
            unique_together={('branch', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='branchproductinventory',
            unique_together={('product', 'branch')},
        ),
    ]
