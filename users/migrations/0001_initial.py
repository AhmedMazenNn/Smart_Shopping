# Generated by Django 4.2.22 on 2025-07-01 16:07

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0001_initial'),
        ('stores', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserAccount',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('user_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email Address')),
                ('username', models.CharField(blank=True, help_text='Optional. A unique string identifier. Will be auto-generated based on role and email if left blank.', max_length=150, null=True, unique=True, verbose_name='Username')),
                ('firebase_uid', models.CharField(blank=True, help_text='Firebase User ID (UID) for users authenticated via Firebase.', max_length=128, null=True, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='Last Name')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='Active')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site. Derived from the assigned role.', verbose_name='Staff Status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date Joined')),
                ('is_temporary_password', models.BooleanField(default=False, help_text="Designates if the user's current password is a temporary one and needs to be changed on first login.", verbose_name='Temporary Password')),
                ('branch', models.ForeignKey(blank=True, help_text='The specific branch this user account is associated with.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='branch_users', to='stores.branch', verbose_name='Associated Branch')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'User Account',
                'verbose_name_plural': 'User Accounts',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('role_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role_name', models.CharField(max_length=50, unique=True, verbose_name='Role Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('is_staff_role', models.BooleanField(default=False, help_text='Designates whether users with this role can log into the admin site.', verbose_name='Is Staff Role')),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('employee_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('job_title', models.CharField(blank=True, help_text="Specific job title for this employee (e.g., 'Cashier', 'Branch Manager').", max_length=100, null=True, verbose_name='Job Title')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Phone Number')),
                ('tax_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Tax ID (VAT/TRN/SSN)')),
                ('commission_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Commission percentage for sales (e.g., for cashiers)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))], verbose_name='Commission Percentage (%)')),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employees', to='stores.branch', verbose_name='Associated Branch')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employees', to='products.department', verbose_name='Associated Department')),
                ('store', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employees', to='stores.store', verbose_name='Associated Store')),
                ('user_account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='employee_profile', to=settings.AUTH_USER_MODEL, verbose_name='User Account')),
            ],
            options={
                'verbose_name': 'Employee',
                'verbose_name_plural': 'Employees',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customer_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Phone Number')),
                ('address', models.TextField(blank=True, null=True, verbose_name='Address')),
                ('credit_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Credit Balance')),
                ('user_account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='customer_profile', to=settings.AUTH_USER_MODEL, verbose_name='User Account')),
            ],
            options={
                'verbose_name': 'Customer Profile',
                'verbose_name_plural': 'Customer Profiles',
            },
        ),
        migrations.AddField(
            model_name='useraccount',
            name='role',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_accounts', to='users.role', verbose_name='Role'),
        ),
        migrations.AddField(
            model_name='useraccount',
            name='store',
            field=models.ForeignKey(blank=True, help_text='The main store this user account is associated with.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='store_users', to='stores.store', verbose_name='Associated Store'),
        ),
        migrations.AddField(
            model_name='useraccount',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='useraccount',
            constraint=models.UniqueConstraint(condition=models.Q(('username__isnull', False), models.Q(('username', ''), _negated=True)), fields=('username',), name='unique_username_if_not_null_or_empty_ua', violation_error_message='A user with that username already exists.'),
        ),
    ]
