# Generated by Django 4.2.22 on 2025-07-01 16:07

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Order ID')),
                ('date', models.DateField(default=django.utils.timezone.localdate, verbose_name='Order Date')),
                ('recorded_at', models.DateTimeField(auto_now_add=True, verbose_name='Recorded At')),
                ('non_app_customer_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Non-App Customer Name')),
                ('non_app_customer_phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Non-App Customer Phone')),
                ('customer_tax_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Customer Tax ID (VAT/TRN)')),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='Total Amount')),
                ('total_amount_before_vat', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='Total Amount Before VAT')),
                ('total_vat_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='Total VAT Amount')),
                ('fee_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=10, verbose_name='Fee/Commission Amount')),
                ('status', models.CharField(choices=[('pending_payment', 'Pending Payment'), ('paid', 'Paid'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('returned', 'Returned'), ('partially_returned', 'Partially Returned')], default='pending_payment', max_length=20, verbose_name='Order Status')),
                ('payment_method', models.CharField(choices=[('cash', 'Cash'), ('electronic', 'Electronic Payment'), ('credit_balance', 'Credit Balance'), ('not_paid', 'Not Paid Yet')], default='not_paid', max_length=20, verbose_name='Payment Method')),
                ('transaction_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Transaction ID (for electronic payment)')),
                ('paid_at', models.DateTimeField(blank=True, null=True, verbose_name='Paid At')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completed At')),
                ('invoice_number', models.CharField(blank=True, max_length=100, null=True, unique=True, verbose_name='Invoice Number')),
                ('invoice_issue_date', models.DateTimeField(blank=True, null=True, verbose_name='Invoice Issue Date')),
                ('accounting_invoice_id', models.CharField(blank=True, max_length=100, null=True, unique=True, verbose_name='Accounting Invoice ID')),
                ('zatca_submission_status', models.CharField(choices=[('PENDING', 'Pending ZATCA Submission'), ('SUBMITTED', 'Submitted to ZATCA'), ('ACCEPTED', 'ZATCA Accepted'), ('REJECTED', 'ZATCA Rejected'), ('FAILED', 'ZATCA Submission Failed')], default='PENDING', max_length=20, verbose_name='ZATCA Submission Status')),
                ('initial_qr_code', models.ImageField(blank=True, null=True, upload_to='qr_codes/initial/', verbose_name='Initial QR Code (Customer Scan)')),
                ('exit_qr_code', models.ImageField(blank=True, null=True, upload_to='qr_codes/exit/', verbose_name='Exit/Return QR Code')),
                ('exit_qr_code_expiry', models.DateTimeField(blank=True, null=True, verbose_name='Exit QR Code Expiry')),
                ('is_exchange', models.BooleanField(default=False, verbose_name='Is Exchange Order')),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'ordering': ['-recorded_at'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Quantity')),
                ('price_at_purchase', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Price at Purchase')),
                ('vat_rate', models.DecimalField(decimal_places=4, default=Decimal('0.15'), help_text='VAT Rate as a decimal (e.g., 0.15 for 15%)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('1.00'))], verbose_name='VAT Rate')),
                ('commission_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Commission rate for this specific item at time of sale (for AI training)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))], verbose_name='Commission Percentage (%)')),
                ('commission_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, max_digits=10, verbose_name='Commission Amount')),
                ('product_attributes_for_ai', models.JSONField(blank=True, null=True, verbose_name='Product Attributes for AI')),
            ],
            options={
                'verbose_name': 'Order Item',
                'verbose_name_plural': 'Order Items',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Payment Amount')),
                ('payment_date', models.DateTimeField(auto_now_add=True, verbose_name='Payment Date')),
                ('method', models.CharField(choices=[('cash', 'Cash'), ('electronic', 'Electronic Payment'), ('credit_balance', 'Credit Balance'), ('cheque', 'Cheque'), ('other', 'Other')], default='cash', max_length=20, verbose_name='Payment Method')),
                ('transaction_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Transaction ID')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'ordering': ['-payment_date'],
            },
        ),
        migrations.CreateModel(
            name='Return',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('return_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Return ID')),
                ('return_date', models.DateTimeField(auto_now_add=True, verbose_name='Return Date')),
                ('total_returned_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='Total Returned Amount')),
                ('reason', models.TextField(blank=True, null=True, verbose_name='Reason for Return')),
                ('refund_method', models.CharField(choices=[('CASH', 'Cash Refund'), ('STORE_CREDIT', 'Store Credit'), ('ELECTRONIC_REFUND', 'Electronic Refund'), ('EXCHANGE', 'Exchange')], default='CASH', max_length=20, verbose_name='Refund Method')),
                ('refund_transaction_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Refund Transaction ID')),
            ],
            options={
                'verbose_name': 'Return',
                'verbose_name_plural': 'Returns',
                'ordering': ['-return_date'],
            },
        ),
        migrations.CreateModel(
            name='ReturnItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_returned', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Quantity Returned')),
                ('price_at_return', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Price at Return')),
            ],
            options={
                'verbose_name': 'Returned Item',
                'verbose_name_plural': 'Returned Items',
            },
        ),
        migrations.CreateModel(
            name='TempOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Updated At')),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='Total Amount')),
            ],
            options={
                'verbose_name': 'Temporary Order',
                'verbose_name_plural': 'Temporary Orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TempOrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Expected Quantity')),
                ('scanned_quantity', models.PositiveIntegerField(default=0, verbose_name='Scanned Quantity')),
                ('price_at_scan', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Price at Scan')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.product', verbose_name='Product')),
                ('temp_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='sales.temporder', verbose_name='Temporary Order')),
            ],
            options={
                'verbose_name': 'Temporary Order Item',
                'verbose_name_plural': 'Temporary Order Items',
            },
        ),
    ]
